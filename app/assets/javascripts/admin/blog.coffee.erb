$(document).ready ->

  #Add a new category from the add/edit post admin page
  window.admin_blog =
    new_category: (category, post_id) ->
      ajax_params = 
        type: "POST"
        url: "/admin/blog/categories.js"
        data:
          "category": category 
          "post": post_id
      $.ajax(ajax_params)

    edit_category_tag: (that) ->
      edit_form = $(that)
                .parent()
                  .parent()
                    .find('.edit')
      reply_form = $(that)
                .parent()
                  .parent()
                    .find('.reply')

      reply_form.hide()

      if edit_form.is(':visible')
        edit_form.fadeOut()
      else
        edit_form.fadeIn()
        edit_form.find('input:first-child').focus()

      return false

    delete_category: (category_id, page) ->
      page = '1' if page == ''

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/categories.js"
        data:
          "id": category_id
          "page": page
      $.ajax(ajax_params)
      return false

    delete_tag: (tag, page) ->
      page = '1' if page == '' || !page

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/tags.js"
        data:
          "tag": tag
          "page": page
      $.ajax(ajax_params)
      return false
    
    delete_post_tag: (tag) ->
      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/tags.js"
        data:
          "tag": tag
      $.ajax(ajax_params)

    create_tag: (tags) ->
      ajax_params = 
        type: "POST"
        url: "/admin/blog/tags.js"
        data:
          "tags": tags.join(',')
      $.ajax(ajax_params)
    
    setup_tag_autocomplete: (auto_complete_object) ->
      ajax_params = 
        type: "GET"
        url: "/admin/blog/tags.json"
        success: (data) ->
          $(auto_complete_object)
            .autocomplete {
              source: data
              select: (e, ui) ->
                if e.which == 1
                  tag_input.submit([ui.item.value])
              close: ->
                $(this).val('')
            }    
      $.ajax ajax_params

    preview_post: ->
      data = admin_blog.get_post_data_for_ajax()

      ajax_params = 
        type: "POST"
        url: "/admin/blog/posts/create/preview.js"
        data:
          data
        success: (data)->
          window.open("/admin/blog/posts/preview/#{data}")
      $.ajax(ajax_params)

    get_post_data_for_ajax: ->
      form = $('.edit_post, .new_post')
      
      data = {}
      post = {}
      post['title'] = form.find('#post_title').val()
      post['content'] = form.find('#post_content').val()
      data['commit'] = form.find('input[name=commit]').val()
      data['status'] = form.find('#status').val()
      data['categories'] = $.map form.find('.category_list input:checked'), (n,i) ->
        return $(n).val()

      data['tags'] = $.map form.find('.tag_list input'), (n,i) ->
        return $(n).val()

      data['post'] = post
      console.log(data)
      return data
    
    set_comment_status: (comment_id, page, type, status)->
      page = '1' if page == '' || !page

      ajax_params = 
        type: "POST"
        url: "/admin/blog/comments/update/status.js"
        data:
          "id": comment_id
          "page": page
          "type": type
          "status": status
      $.ajax(ajax_params)
      return false

    delete_comment: (comment_id, page, type) ->
      page = '1' if page == '' || !page

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/comments/delete.js"
        data:
          "id": comment_id
          "page": page
          "type": type
      $.ajax(ajax_params)
      return false
    
    comment_reply: (that) ->
      reply_form = $(that)
                .parent()
                  .parent()
                    .find('.reply')
      edit_form = $(that)
                .parent()
                  .parent()
                    .find('.edit')

      edit_form.hide()

      if reply_form.is(':visible')
        reply_form.fadeOut()
      else
        reply_form.fadeIn()
        reply_form.find('#comment_content').val('').focus()
      return false
    
    cancel_link_edit: (that) ->
      edit_form = $(that).parent().parent()
      edit_form.hide()
    
    edit_link: (that) ->
      edit_form = this.get_link_form(that)
    
      if edit_form.is(':visible')
        edit_form.hide()
      else
        $('.info_table form:visible').hide() # hide any open link forms
        edit_form.show()

    delete_link: (link_id, that) ->
      rollover_item = $(that)
                        .parent()
                          .parent()
                            .parent()

      rollover_item.prev('tr').remove()
      rollover_item.remove()

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/links.js"
        data:
          "id": link_id
      $.ajax(ajax_params)

    get_link_form: (that) ->
      edit_form = $(that)
                    .parent()
                      .parent()
                        .find('form')
      return edit_form
    

  tag_input =
    check_for_seperator: (that,seperator) ->
      str = $(that).val()
      if(str.charAt(str.length - 1) == seperator)
        tag_input.submit(str.split(seperator))
        $(that).val('')

    submit: (arr) ->
      valid_tags = []
        
      for new_tag in arr
        is_found = false

        for input in $(".tag_list input")
          value = $(input).attr('value')

          if value == new_tag || $.inArray(new_tag, valid_tags) > -1
            is_found = true
            break

        if !is_found && new_tag != ""
          valid_tags.push(new_tag)

      if(valid_tags.length > 0)
        admin_blog.create_tag(valid_tags)
    
    submit_input: (that) ->
      tag_input.submit($(that).val().split(','))
      $(that).val('')

  markdown_cheatsheet = 
    expand_definition_for: (that) ->
      this.close_all()
      def = $(that).next('dd')
      def.animate {'height': def.find('>div').outerHeight()},'100'
    close_all:  ->
      $('.markdown_cheat_sheet dd').animate({'height': '0'})
    close_help: ->
      $('.markdown_cheat_sheet').animate {'height': 0}, ->
        markdown_cheatsheet.close_all()
    open_help: ->
      $('.markdown_cheat_sheet').animate {'height': $('.markdown_cheat_sheet dl').height() + 40}, ->
        $('.markdown_cheat_sheet').height('auto')
    toggle_help: ->
      cheat_sheet = $('.markdown_cheat_sheet')
      if cheat_sheet.height() > 0
        this.close_help()
      else
        this.open_help()


  ####################################
  #       autocomplete data          #
  ####################################

  # populate the autocomplete for tags if the tag input element exists
  # this prevents the autocomplete from being loaded on every page when
  # it isn't needed
  if $('.tag_input').length > 0
    admin_blog.setup_tag_autocomplete(".tag_input")

  ####################################
  #             bindings             #
  ####################################

  # markdown cheatsheet accordian functionality
  # open matching definition when a term is clicked
  $('.markdown_cheat_sheet dt').bind 'click', ->
    if $(this).next('dd').height() > 0
      $(this).next('dd').animate({'height': 0})
    else
      markdown_cheatsheet.expand_definition_for(this)
  
  #close cheatsheet
  $('.markdown_cheat_sheet .close').bind 'click', ->
    markdown_cheatsheet.close_help()
  #open cheatsheet
  $('.markdown_help').bind 'click', ->
    markdown_cheatsheet.toggle_help()
    return false

  # insert new tag when the comma is used as a seperator
  $(".tag_input")
  .bind 'keyup', (evt) -> 
    tag_input.check_for_seperator(this,',')
  
  .bind 'keydown', (evt) ->
    if(evt.which == 13)
      tag_input.submit_input(this)
      evt.stopPropagation()
      return false
    else
      return true

  # on enter, stop the form from submitting but trigger the add category button event
  $('.info_table .new_category')
  .bind 'keydown', (evt) ->
    evt.stopPropagation()
    if(evt.which == 13)
      $(this)
        .siblings(".button")
          .trigger('click')
        .siblings('.new_category')
          .val('')
      return false

  # on submit, close the form
  $('.info_table')
    .delegate 'form', 'submit',(evt) ->
      evt.stopPropagation
      if $(this).is(':visible')
        $(this)
          .fadeOut()

