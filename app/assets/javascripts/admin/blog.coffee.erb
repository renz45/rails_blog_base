$(document).ready ->

  #category related
  window.category = 
    create: (category, post_id) ->
      ajax_params = 
        type: "POST"
        url: "/admin/blog/categories.js"
        data:
          "category": category 
          "post": post_id
      $.ajax(ajax_params)

    edit: (that) ->
      edit_form = $(that)
                    .parent()
                      .parent()
                        .find('.edit')
      reply_form = $(that)
                    .parent()
                      .parent()
                        .find('.reply')

      reply_form.hide()

      if edit_form.is(':visible')
        edit_form.fadeOut()
      else
        edit_form.fadeIn()
        edit_form.find('input:first-child').focus()
      return false

    delete: (that) ->
      form = $(that).parent().parent().find('form')
      page = form.find('#page').val()
      category_id = form.find('#category_id').val()
      
      page = '1' if page == ''

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/categories.js"
        data:
          "id": category_id
          "page": page
      $.ajax(ajax_params)

  # tag related 
  window.tag =
    edit: (that) ->
      category.edit(that)

    delete: (that) ->
      form = $(that).parent().parent().find('form')
      page = form.find('#page').val()
      tag_id = form.find('#tag_id').val()

      page = '1' if page == '' || !page

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/tags.js"
        data:
          "tag_id": tag_id
          "page": page
      $.ajax(ajax_params)
    
    create: (tags) ->
      ajax_params = 
        type: "POST"
        url: "/admin/blog/tags.js"
        data:
          "tags": tags.join(',')
      $.ajax(ajax_params)
    
    load_autocomplete: (auto_complete_object) ->
      ajax_params = 
        type: "GET"
        url: "/admin/blog/tags.json"
        success: (data) ->
          $(auto_complete_object)
            .autocomplete {
              source: data
              select: (e, ui) ->
                if e.which == 1
                  tag.submit([ui.item.value])
              close: ->
                $(this).val('')
            }    
      $.ajax ajax_params

    check_for_seperator: (that,seperator) ->
      str = $(that).val()
      if(str.charAt(str.length - 1) == seperator)
        tag.submit(str.split(seperator))
        $(that).val('')

    submit: (arr) ->
      valid_tags = []
        
      for new_tag in arr
        is_found = false

        for input in $(".tag_list input")
          value = $(input).attr('value')

          if value == new_tag || $.inArray(new_tag, valid_tags) > -1
            is_found = true
            break

        if !is_found && new_tag != ""
          valid_tags.push(new_tag)

      if(valid_tags.length > 0)
        tag.create(valid_tags)
    
    submit_input: (that) ->
      tag.submit($(that).val().split(','))
      $(that).val('')

  # post related
  window.post =
    preview: ->
      # open a blank window on click so it opens in a tab
      # for some reason the window opens in a new browser 
      # if it is opened in only the ajax callback
      window.open("",'previewWindow')
      data = post.get_data()

      ajax_params = 
        type: "POST"
        url: "/admin/blog/posts/create/preview.js"
        data: data
        success: (result)->
          # tell the currently open window to go to the preview page
          window.open("/admin/blog/posts/preview/#{result}", 'previewWindow')
          window.focus('previewWindow')
        error: ->
          # if there is an ajax error response, alert the user with an error message
          # and close the tab opened for the preview
          preview_window = window.open('', 'previewWindow')
          alert('There was a problem loading the preview, please try again')
          preview_window.close()
      $.ajax(ajax_params)

    get_data: ->
      form = $('.edit_post, .new_post')
      
      data = {}
      post = {}
      post['title'] = form.find('#post_title').val()
      post['content'] = form.find('#post_content').val()
      data['commit'] = form.find('input[name=commit]').val()
      data['status'] = form.find('#status').val()
      data['categories'] = $.map form.find('.category_list input:checked'), (n,i) ->
        return $(n).val()

      data['tags'] = $.map form.find('.tag_list input'), (n,i) ->
        return $(n).val()

      data['post'] = post
      return data

  # comment related
  window.comment =  
    edit: (that) ->
      category.edit(that)

    set_status: (that, status)->
      form = $(that).parent().parent().find('form')
      comment_id = form.find('#reply_id').val()
      page =  form.find('#page').val()
      type = form.find('#type').val()

      page = '1' if page == '' || !page

      ajax_params = 
        type: "POST"
        url: "/admin/blog/comments/update/status.js"
        data:
          "id": comment_id
          "page": page
          "type": type
          "status": status
      $.ajax(ajax_params)

    delete: (that) ->
      form = $(that).parent().parent().find('form')
      comment_id = form.find('#reply_id').val()
      page =  form.find('#page').val()
      type = form.find('#type').val()
      page = '1' if page == '' || !page

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/comments/delete.js"
        data:
          "id": comment_id
          "page": page
          "type": type
      $.ajax(ajax_params)
    
    reply: (that) ->
      reply_form = $(that)
                .parent()
                  .parent()
                    .find('.reply')
      edit_form = $(that)
                .parent()
                  .parent()
                    .find('.edit')

      edit_form.hide()

      if reply_form.is(':visible')
        reply_form.fadeOut()
      else
        reply_form.fadeIn()
        reply_form.find('#comment_content').val('').focus()
      
  # link related
  window.link = 
    cancel_edit: (that) ->
      edit_form = $(that).parent().parent()
      edit_form.hide()
  
    edit: (that) ->
      edit_form = this.get_link_form(that)
    
      if edit_form.is(':visible')
        edit_form.hide()
      else
        $('.info_table form:visible').hide() # hide any open link forms
        edit_form.show()

    delete: (link_id, that) ->
      rollover_item = $(that)
                        .parent()
                          .parent()
                            .parent()

      rollover_item.prev('tr').remove()
      rollover_item.remove()

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/links.js"
        data:
          "id": link_id
      $.ajax(ajax_params)

    get_form: (that) ->
      edit_form = $(that)
                    .parent()
                      .parent()
                        .find('form')
      return edit_form






  window.admin_blog =
    cancel_link_edit: (that) ->
      edit_form = $(that).parent().parent()
      edit_form.hide()
    
    edit_link: (that) ->
      edit_form = this.get_link_form(that)
    
      if edit_form.is(':visible')
        edit_form.hide()
      else
        $('.info_table form:visible').hide() # hide any open link forms
        edit_form.show()

    delete_link: (link_id, that) ->
      rollover_item = $(that)
                        .parent()
                          .parent()
                            .parent()

      rollover_item.prev('tr').remove()
      rollover_item.remove()

      ajax_params = 
        type: "DELETE"
        url: "/admin/blog/links.js"
        data:
          "id": link_id
      $.ajax(ajax_params)

    get_link_form: (that) ->
      edit_form = $(that)
                    .parent()
                      .parent()
                        .find('form')
      return edit_form


  ####################################
  #       autocomplete data          #
  ####################################

  # populate the autocomplete for tags if the tag input element exists
  # this prevents the autocomplete from being loaded on every page when
  # it isn't needed
  if $('.tag_input').length > 0
    tag.load_autocomplete(".tag_input")

  ####################################
  #             bindings             #
  ####################################

  #creates a new category
  $('.new_category_button').bind 'click', ->
    category_name = $('.new_category').val()
    post_id = $('#post_id').val()
    category.create(category_name, post_id)
    $('.new_category').val('')
    return false
  
  info_table = $('.info_table') #cache the info table DOM search

  info_table
    # edit category button
    .delegate '.edit_category_button', 'click', ->
      category.edit(this)
      return false
    #delete category button
    .delegate '.delete_category_button', 'click', ->
      category.delete(this)
      return false
    #edit comment button
    .delegate '.comment_edit_button', 'click', ->
      comment.edit(this)
      return false
    # reply to comment button
    .delegate '.comment_reply_button', 'click', ->
      comment.reply(this)
      return false
    # trash comment button
    .delegate '.comment_trash_button', 'click', ->
      comment.set_status(this,'trash')
      return false
    #delete comment button
    .delegate '.comment_delete_button', 'click', ->
      comment.delete(this)
      return false
    # mark comment as spam button
    .delegate '.comment_spam_button', 'click', ->
      comment.set_status(this,'spam')
      return false
    # unapprove comment button
    .delegate '.comment_unapprove_button', 'click', ->
      comment.set_status(this,'unapproved')
      return false
    # approve comment button
    .delegate '.comment_approve_button', 'click', ->
      comment.set_status(this,'approved')
      return false
    # edit tag button
    .delegate '.edit_tag_button', 'click', ->
      tag.edit(this)
      return false
   # delete tag button
    .delegate '.delete_tag_button', 'click', ->
      tag.delete(this)
      return false
    # on submit, close the form
    .delegate 'form', 'submit',(evt) ->
      evt.stopPropagation
      if $(this).is(':visible')
        $(this)
          .fadeOut()
  
  # on enter, stop the form from submitting but trigger the add category button event
  $('.info_table .new_category')
  .bind 'keydown', (evt) ->
    evt.stopPropagation()
    if(evt.which == 13)
      $(this)
        .siblings(".button")
          .trigger('click')
        .siblings('.new_category')
          .val('')
      return false

  # insert new tag when the comma is used as a seperator
  $(".tag_input")
    .bind 'keyup', -> 
      tag.check_for_seperator(this,',')
  # if enter(13) is pressed, submit the tag to the post, instead of submitting the form
    .bind 'keydown', (evt) ->
      if(evt.which == 13)
        tag.submit_input(this)
        evt.stopPropagation()
        return false

  # preview post button
  $('.post_preview').bind 'click', ->
    post.preview()
    return false
  